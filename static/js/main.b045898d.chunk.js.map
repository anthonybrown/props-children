{"version":3,"sources":["../../picturid/src/components/Picture.js","../../picturid/src/components/Button.js","../../picturid/src/App.js","../../picturid/src/serviceWorker.js","../../picturid/src/index.js"],"names":["Picture","props","react_default","a","createElement","className","alt","src","children","Button","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pictureId","label","buttonLabel","bind","assertThisInitialized","includes","setState","id","pictureSrc","_this2","onClick","setCurrentPic","Component","App","pictures","currentPic","map","picture","components_Picture","key","components_Button","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gOAaeA,EAXC,SAACC,GAAD,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OACEE,IAAI,cACJC,IAAKN,EAAMM,IACXF,UAAU,YAEXJ,EAAMO,WC2BIC,cAjCb,SAAAA,EAAYR,GAAO,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMZ,KACDgB,MAAQ,CACXC,UAAW,KACXC,MAAO,MAETT,EAAKU,YAAcV,EAAKU,YAAYC,KAAjBV,OAAAW,EAAA,EAAAX,CAAAD,IANFA,2EAQPH,GACVA,EAAIgB,SAAS,WACXV,KAAKW,SAAS,CAACN,UAAWL,KAAKZ,MAAMwB,GAAIN,MAAO,UAChDZ,EAAIgB,SAAS,WACbV,KAAKW,SAAS,CAACN,UAAWL,KAAKZ,MAAMwB,GAAIN,MAAO,WAChDN,KAAKW,SAAS,CAACN,UAAWL,KAAKZ,MAAMwB,GAAIN,MAAO,sDAIlDN,KAAKO,YAAYP,KAAKZ,MAAMyB,6CAGrB,IAAAC,EAAAd,KACP,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEwB,QAAS,kBAAMD,EAAK1B,MAAM4B,cAAcF,EAAK1B,MAAMwB,MAElDZ,KAAKI,MAAME,eA3BDW,aC6CNC,qBA1Cb,SAAAA,EAAY9B,GAAO,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,IACjBrB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoB,GAAAf,KAAAH,KAAMZ,KACDgB,MAAQ,CACXe,SAAU,CACR,CAACP,GAAI,EAAGlB,IAAK,2CACb,CAACkB,GAAI,EAAGlB,IAAK,6CACb,CAACkB,GAAI,EAAGlB,IAAK,8CAEf0B,WAAY,MAGdvB,EAAKmB,cAAgBnB,EAAKmB,cAAcR,KAAnBV,OAAAW,EAAA,EAAAX,CAAAD,IAXJA,6EAcLe,GACZZ,KAAKW,SAAS,CAACS,WAAYR,qCAGnB,IAAAE,EAAAd,KACR,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZQ,KAAKI,MAAMe,SAASE,IAAI,SAACC,GACxB,OACEjC,EAAAC,EAAAC,cAACgC,EAAD,CAASC,IAAKF,EAAQV,GAAIlB,IAAK4B,EAAQ5B,KACrCL,EAAAC,EAAAC,cAACkC,EAAD,CACEZ,WAAYS,EAAQ5B,IACpBsB,cAAeF,EAAKE,cACpBJ,GAAIU,EAAQV,SAMpBvB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,kCACkCQ,KAAKI,MAAMgB,oBApCrCH,cCQZS,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrC,QACf+B,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,+BAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,OAAQ,WAC9B,IAAM3B,EAAK,GAAA4B,OAAMJ,+BAAN,sBAEP/B,GAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,GACHK,KAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAAAC,GACjCA,EAAa+B,aAAahC,KAAK,WAC7BV,OAAOC,SAAS0C,aAKpBvC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFA0B,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,KAAK,WACjCO,QAAQC,IACN,gHAMJd,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.b045898d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Picture = (props) => (\n  <div className='picture'>\n    <img \n      alt='placeholder'\n      src={props.src}\n      className='picture'\n    />\n    {props.children}\n  </div>\n)\n\nexport default Picture;\n","import React, { Component } from 'react';\n\nclass Button extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pictureId: null,\n      label: null\n    };\n    this.buttonLabel = this.buttonLabel.bind(this);\n  }\n  buttonLabel(src) {\n    src.includes('200x100') \n    ? this.setState({pictureId: this.props.id, label: 'Small'})\n    : src.includes('400x200') \n    ? this.setState({pictureId: this.props.id, label: 'Medium'})\n    : this.setState({pictureId: this.props.id, label: 'Large'})\n  }\n  \n  componentDidMount() {\n    this.buttonLabel(this.props.pictureSrc)\n  }\n\n  render() {\n    return (\n      <div>\n        <button\n          onClick={() => this.props.setCurrentPic(this.props.id)}\n        >\n          {this.state.label}\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport Picture from './components/Picture';\nimport Button from './components/Button';\nimport './App.css';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pictures: [\n        {id: 1, src: 'https://via.placeholder.com/200x100/f70'},\n        {id: 2, src: 'http://via.placeholder.com/700x350/9fd6ea'},\n        {id: 3, src: 'http://via.placeholder.com/400x200/f9c2fc'}\n      ],\n      currentPic: null\n    };\n  \n    this.setCurrentPic = this.setCurrentPic.bind(this);\n  }\n\n  setCurrentPic(id) {\n    this.setState({currentPic: id});\n  }\n\n  render () {\n    return (\n      <div>\n        <div className='squares'>\n          {this.state.pictures.map((picture) => {\n            return (\n              <Picture key={picture.id} src={picture.src}>\n                <Button\n                  pictureSrc={picture.src}\n                  setCurrentPic={this.setCurrentPic}\n                  id={picture.id}\n                />\n              </Picture>\n            )\n          })}\n        </div>\n          <p className='output'>\n            Current selected picture ID is {this.state.currentPic}\n          </p>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}